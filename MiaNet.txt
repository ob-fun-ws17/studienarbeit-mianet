-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Mia (Mäxchen/ Lügen) game over the network package.
--   
--   Package for the fp lecture project at hm.edu. For more information
--   please see the README on GitHub at
--   <a>https://github.com/ob-fun-ws17/studienarbeit-mianet</a>
@package MiaNet
@version 0.1.0.0


module Types

-- | Client. Game competitor.
type Client = (Text, Connection, Int)

-- | ServerState. A list of game competitors.
type ServerState = [Client]

-- | Draw. logs the diced result, the logged result and the result of the
--   last draw.
type Draw = (Int, Int, Int)

-- | Action. A list of actions/commands a client can enter.
type Action = [(String, Int, String)]

-- | ActiveGame. Information if game is active.
type ActiveGame = Bool


module MianetConstants

-- | actions method returns a list of actions.
actions :: Action

-- | initiates the serverState.
newServerState :: ServerState

-- | initiates the last draw base.
lastDrawBase :: (Int, Int, Int)


module Message

-- | converts command line input into json.
messageHandler :: Text -> String

-- | takes a json object and convert it to a string.
jsonStringify :: ByteString -> String

-- | takes a string and converts it to a json object.
jsonParse :: String -> ByteString

-- | takes a jsonObject and puts it in a container.
jsonToMessageContainer :: ByteString -> Maybe Message

-- | returns the parameter "command" of a message.
getCommandOfMessage :: Message -> String

-- | returns the parameter "parameter" of a message.
getParameterOfMessage :: Message -> String

-- | takes Maybe a and returns a.
extractContainer :: Maybe a -> a

-- | Message data.
data Message
instance GHC.Show.Show Message.Message
instance Data.Aeson.Types.FromJSON.FromJSON Message.Message
instance Data.Aeson.Types.ToJSON.ToJSON Message.Message


module Helper

-- | returns the first element of a 3-element-tupel
fst' :: (a, b, c) -> a

-- | returns the second element of a 3-element-tupel
snd' :: (a, b, c) -> b

-- | returns the third element of a 3-element-tupel
thd' :: (a, b, c) -> c

-- | helper function for reading command line.
prompt :: String -> IO String

-- | checks if the entered port is a valid port
validPort :: String -> Bool

-- | checks if the user wants to create or just join a game.
onlyClient :: String -> Bool

-- | formats a list of integer to a string
intArrayToString :: [Int] -> String


module GameInfo

-- | broadcasts relevant information ( hostname and port ) to
--   255.255.255.255 on port 9559.
broadcastGameInfo :: String -> IO ()

-- | receives broadcasting information on port 9559 on 0.0.0.0 in order to
--   connect to a game.
receiveGameInfo :: IO (Maybe ByteString)

-- | method to get hostname and port in a tupel out of one string.
returnHostPortTupel :: String -> (String, Int)


module Distributor

-- | removes a client from the connection list.
removeClient :: Client -> ServerState -> ServerState

-- | sends a message to all clients.
broadcast :: Text -> ServerState -> IO ()

-- | sends a message to all client except of the sender client (last active
--   client).
broadcastExceptSender :: Text -> Client -> ServerState -> IO ()

-- | sends a message to a specific client
sendToClient :: Int -> Text -> ServerState -> IO ()

-- | broadcasts to all clients except of a specific client
broadcastExceptOf :: Text -> [Text] -> ServerState -> IO ()

-- | sends a message to the list client in the connection list.
sendToLastClient :: Text -> ServerState -> IO ()


module Dice

-- | string represents the dice.
dice :: String

-- | tossDice definition takes RandomGen and returns String.
tossDice :: RandomGen g => g -> [Char]

-- | rolls a 6-sided-dice and returns the result.
rollDice :: IO Int

-- | takes two numbers (the rolled dices), puts them together and
--   muliplicates it with a factor.
formatNums :: Int -> Int -> Int

-- | reverse function of formatNums.
deformatNums :: Int -> Int


module MianetGetter

-- | returns the actor of the connection list.
getActor :: MVar ServerState -> IO Client

-- | returns the reactor of the connection list.
getReactor :: MVar ServerState -> IO Client

-- | returns the actorName.
getActorName :: MVar ServerState -> IO Text

-- | return the reactorName.
getReactorName :: MVar ServerState -> IO Text

-- | returns the winner of a connection list.
getWinner :: MVar ServerState -> Int -> IO Client

-- | returns the winner name.
getwinnerName :: MVar ServerState -> Int -> IO Text

-- | returns the order of an active game.
getOrder :: MVar ServerState -> IO Text

-- | returns a default Message Message.
getDefaultMessage :: MVar Draw -> IO Text

-- | returns the name of an specific client.
getClientName :: Int -> ServerState -> String


module MianetDistributor

-- | sends a message to the last active client.
sendToSenderClient :: Connection -> Text -> IO ()

-- | sends a message to the actor client.
sendToActor :: MVar ServerState -> Text -> IO ()

-- | sends a message to the reactor client.
sendToReactor :: MVar ServerState -> Text -> IO ()

-- | sends a message to all clients
sendToAllClients :: MVar ServerState -> Text -> IO ()

-- | sends a message to all clients except of the sender client (last
--   active client).
sendToAllClientsExceptSender :: Client -> MVar ServerState -> Text -> IO ()

-- | sends a message to all clients except of the actor client.
sendToAllExceptActor :: MVar ServerState -> Text -> IO ()

-- | sends a message to all clients except of actor and reactor.
sendToAllExceptActorAndReactor :: MVar ServerState -> Text -> IO ()

-- | sends a message to winners (winner client).
sendToWinner :: MVar ServerState -> Int -> Text -> IO ()

-- | send a message to the loosers.
sendToLooser :: MVar ServerState -> Int -> Text -> IO ()


module MianetDraws

-- | moves the first client in the connection list to the last position.
moveClient :: ServerState -> ServerState

-- | the reactor accused the actor of lying. it returns the result.
accuse :: MVar ServerState -> MVar Draw -> Int -> IO ()

-- | increments the score of the actor or reactor.
incrementScore :: MVar ServerState -> (MVar ServerState -> IO Text) -> IO ()

-- | increments the score of a specific client.
incrementWinCountForClient :: Text -> ServerState -> ServerState

-- | initiates the next draw and sends the respective messages to the
--   clients.
nextDraw :: MVar ServerState -> MVar Draw -> Int -> Int -> IO ()

-- | initiates the next draw. it calls the moveClient function.
moveToNextDraw :: MVar ServerState -> IO (MVar ServerState)

-- | rolls dices two times and returns the result.
rollDices' :: MVar Draw -> IO Int

-- | checks if somebody got the max score.
checkForWin :: MVar ServerState -> Int -> IO Bool

-- | inititates the end of a game.
endOfGameFunc :: MVar ServerState -> Int -> IO ()

-- | it logs the entered dice result of the actor.
logResult :: MVar ServerState -> MVar Draw -> String -> IO ()

-- | checks if it's a valid result.
validResult :: String -> Bool

-- | converts a char to a list of integer and puts it to another list of
--   integer.
addToListWithConv :: [Int] -> Char -> [Int]

-- | in process.
addToListWithConv' :: [Int] -> Char -> Maybe [Int]


module MianetGameHandler

-- | creates a random order for game.
shuffleOrder :: MVar ServerState -> IO (MVar ServerState)

-- | initiates a rematch.
rematch :: MVar ServerState -> MVar Draw -> Int -> IO ()

-- | resets the last draw mvar variable. for example if somebody has lied.
resetLastDraw :: MVar Draw -> IO ()

-- | resets the gamers score.
resetGamersScore :: MVar ServerState -> IO ()

-- | closes a game.
closeGame :: MVar ServerState -> MVar ActiveGame -> IO ()
